import { createAsyncThunk, createEntityAdapter, createSlice, Dictionary, EntityId, EntityState, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';



export interface Job{
  id:EntityId,
  name:string
}

const initJobs:EntityState<Job>={ids:[1,2],entities:{1:{id:1, name:'job 1'},2:{id:2, name:'job 2'}}}

const jobAdapter=createEntityAdapter<Job>()

export interface JobState {
 // lastJob: Job | undefined;
  jobs: typeof jobAdapter
}

// const initialState:  {
//   lastJob: undefined,
//   jobList: jobAdapter.getInitialState()
// };

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'job/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );



export const jobSlice = createSlice({
  name: 'jobs',

  initialState:
jobAdapter.getInitialState(initJobs )
,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    jobAdd :jobAdapter.addOne,
    jobAddMany:jobAdapter.addMany,
    jobUpdate:jobAdapter.updateOne,
     jobUpsert:jobAdapter.upsertOne,
    jobDelete:jobAdapter.removeOne

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // builder
    //   .addCase(incrementAsync.pending, (state) => {
    //     state.status = 'loading';
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = 'idle';
    //     state.value += action.payload;
    //   });
  },
});

export const { jobAdd,jobAddMany,jobUpdate,jobUpsert,jobDelete } = jobSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.job.value)`
 const jobSelectors=  jobAdapter.getSelectors((state: RootState)=>state.jobs)

export const {
  selectById: selJobById,
  selectIds:selJobIds,
  selectTotal:selJobCount
}= jobSelectors
// export const selectJobTotalCount = (state: RootState) => jobAdapter.getSelectors().selectTotal
// export const selectJobById =((state: RootState,id:EntityId) => jobAdapter.getSelectors().selectById(state.jobs,id)
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default jobSlice.reducer;
 